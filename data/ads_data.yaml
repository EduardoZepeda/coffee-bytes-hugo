---
en:
  algorithms:
    description: This is the resource that I read, and hence I can recommend in order to learn algorithms, way simpler than SICP and it teaches you everything you need to know about algorithms. Check the rest of books I read and recommend in my profile.
    imageAlt: The algorithm design manual book cover
    imageSrc: https://m.media-amazon.com/images/I/6163mph9wCL._SL1092_.jpg
    link: https://amzn.to/4gUpFoa
    linkText: Check the algorithm design manual price on Amazon
    title: Where to learn about algorithms?
  artificial intelligence:
    description: 'My recommendation is this tiny hundred page book on Machine Learning, it deals with the basis of machine learning and all the math required to understand how AI models are trained. Don''t be foolished by its size, it''s dense, definitely it''s not a walk in the park. The book is so short because it leaves away all the filler and keeps only the crucial parts of Machine Learning. Warning: It contains lots of equations and it''s not exactly one hundred pages but a little bit more.'
    imageAlt: The Hundred-Page Machine Learning Book Cover
    imageSrc: https://m.media-amazon.com/images/I/51XgdTo3xrL._SL1233_.jpg
    link: https://amzn.to/3D3oMvN
    linkText: Check The Hundred-Page Machine Learning Book Price on Amazon
    title: Where to start with Machine Learning and AI
  databases:
    description: Don't settle for SELECT, UPDATE, DELETE, JOINS and UNIONS, SQL has a LOT MORE to offer to make your everyday easier. I haven't finished it yet but it looks great so far. I'll update this when I finish it but until now I feel comfortable recommending it.
    imageSrc: https://m.media-amazon.com/images/I/71m3g1iL+nL._SL1500_.jpg
    link: https://amzn.to/3CYgHIO
    linkText: Check SQL Pocket Guide prices on Amazon
    title: Don't settle for basic SQL queries
  django:
    description: Django 5 came out and all books became obsolete because they're using old django versions in their examples, this one isn't and covers all the basic django features that makes this framework one of the most stable, battle-tested and safe bets when designing a web app.
    imageAlt: Django for Beginners book cover
    imageSrc: https://m.media-amazon.com/images/I/71VWB2Ye+mL._SL1500_.jpg
    link: https://amzn.to/3Qx2pli
    linkText: Check Django for Beginners price on Amazon
    title: Where to learn Django Framework?
  docker:
    description: I'll save you some time. I had a hard time learning the basis of Kubernetes, after watching some video tutorials (free and private) and reading some blogs on the topic, I found this book, it gave me what other resources couldn't so I feel pretty comfortable recommending it. Check it out!
    imageAlt: Kubernetes up and running book cover
    imageSrc: https://m.media-amazon.com/images/I/81fH7yJ8rsL._SL1500_.jpg
    link: https://amzn.to/4k0MDga
    linkText: Check Kubernetes up and running book on Amazon
    title: Learn Kubernetes right now
  fastapi:
    description: Most APIs out there are horribly designed, how much should I nest subcategories in an API? what's HATEOAS? which format is better /api/, put the api version in a subdomain or put the api version in a header? Decisions are made without a reason, don't be one of them. This book deals with all these hard questions in more detail and teaches you how to design good APIs, go check it out.
    imageAlt: Build APIs You Won't Hate book cover
    imageSrc: https://m.media-amazon.com/images/I/71tAidEGMKL._SL1500_.jpg
    link: https://amzn.to/41qJOhp
    linkText: Check Build APIs You Won't Hate price on Amazon
    title: How to design Good APIs
  git:
    description: Sure, everyone can do git add and git commit, but not everyone can use git to its limits, if you don't know about cherry-picking, bisect or hooks, don't settle for the basis, go for the advanced git commands either with the courses below or wherever you want, but take action now.
    link: https://www.educative.io/courses/learn-git-hard-way?aff=xkQr
    linkText: I want to learn advanced Git
    title: Don't settle for git add and git commit
  go:
    description: Does the name Brian W. Kernighan sound familiar to you? Yes? He's the author of 'The C programming language book'. Did you know that he also wrote this book? If you enjoyed his style you will probably like this book too.
    imageAlt: Go Programming Language book cover
    imageSrc: https://m.media-amazon.com/images/I/71poU-tpxmL._SL1500_.jpg
    link: https://amzn.to/41nJIXH
    linkText: Check Go Programming Language price on Amazon
    title: Where to learn Go
  htmx:
    description: null
    link: null
    linkText: null
    title: null
  javascript:
    description: This is THE book when it comes to Javascript. It's a complete guide that covers everything you need to know, from declaring variables, to understanding promises and even the basics of creating a Javascript compiler (Not as performant as it should), if you're going to read a Javascript book, let it be this one.
    imageAlt: Eloquent Javascript book cover
    imageSrc: https://m.media-amazon.com/images/I/81HqVRRwp3L._SL1500_.jpg
    link: https://amzn.to/3QvqSYt
    linkText: Check Eloquent Javascript price on Amazon
    title: Where to upgrade your Javascript skills?
  linux and devops:
    description: 'After searching for the best linux resource in a lot of online forums I found this little gem called ''How linux works''. It''s a complete book that covers basically everything: Cgroups, PAM, Cron daemons and even the bootladers and Linux''s init process. Truthfully I can''t recommend it more, 5/5. Go check it out.'
    imageAlt: How linux works book cover
    imageSrc: https://m.media-amazon.com/images/I/71bCgtBmHdL._SL1500_.jpg
    link: https://amzn.to/3QsXkuw
    linkText: Check How Linux Works Price on Amazon
    title: Where to learn everything about Linux?
  opinions:
    description: Forget about Clean Code and read this book instead. Why? writing good software is hard because the definition of good software is highly variable, this books deals with that question in deep. Throughout the book you'll learn about complexity and its flow, abstractions, information hiding and the 'metas' of programming. IMO A philosophy of software design goes beyond what Clean Code has to offer, sorry uncle Bob.
    imageAlt: A philosophy of software design book cover
    imageSrc: https://m.media-amazon.com/images/I/711Qnv05eTL._SL1231_.jpg
    link: https://amzn.to/4i8kodH
    linkText: Check A philosophy of software design prices on Amazon
    title: How to design good software?
  python:
    description: My book recommendation if you're into Python is this little book. Python tricks is a compilation of tricks (dah) and useful, but obscure and unknown, parts of the language. I thought I knew Python until I read this book, give it a try if you don't believe me.
    imageSrc: https://m.media-amazon.com/images/I/61k7Z74UuZL._SL1500_.jpg
    link: https://amzn.to/4gLHlCB
    linkText: Check Python tricks price on Amazon
    title: How to perfect your Python skills
  react:
    description: This is the resource that I read, and hence I can recommend in order to learn algorithms, way simpler than SICP and it teaches you everything you need to know about algorithms. Check the rest of books I read and recommend in my profile.
    imageAlt: The algorithm design manual book cover
    imageSrc: https://m.media-amazon.com/images/I/6163mph9wCL._SL1092_.jpg
    link: https://amzn.to/4gUpFoa
    linkText: Check the algorithm design manual price on Amazon
    title: Where to learn about algorithms?
  rust:
    description: Behold, the Rust bible, it covers everything you need to know about Rust, I read it, it took me a while to grasp some of the concepts presented but it was worth it. If you want to convert to rustaceanism you should read it too.
    imageAlt: Rust programming language book cover
    imageSrc: https://m.media-amazon.com/images/I/71SlLVGcg-L._SL1500_.jpg
    link: https://amzn.to/4gUwyG2
    linkText: Check Rust programming language price on Amazon
    title: Where to learn Rust?
  seo:
    description: null
    link: null
    linkText: null
    title: null
  software architecture:
    description: This book showed me the way big companies, like Youtube, Dropbox, Google, etc. design their systems to handle astronomic requests per second. Alex Xu teaches you how to structure database replicas, cache, load balancers and all the details about designing enterprise class software, if you're interested in learning about systems that scale, you must not miss this book.
    imageAlt: System design interview book cover
    imageSrc: https://m.media-amazon.com/images/I/51vZ6t5W4gL._SL1499_.jpg
    link: https://amzn.to/41rodp3
    linkText: Check System design interview book price on Amazon
    title: Where you should learn software architecture?
  testing:
    description: null
    link: null
    linkText: null
    title: null
  typescript:
    description: Most APIs out there are horribly designed, how much should I nest subcategories in an API? what's HATEOAS? which format is better /api/, put the api version in a subdomain or put the api version in a header? Decisions are made without a reason, don't be one of them. This book deals with all these hard questions in more detail and teaches you how to design good APIs, go check it out.
    imageAlt: Build APIs You Won't Hate book cover
    imageSrc: https://m.media-amazon.com/images/I/71tAidEGMKL._SL1500_.jpg
    link: https://amzn.to/41qJOhp
    linkText: Check Build APIs You Won't Hate price on Amazon
    title: How to design Good APIs
es:
  algoritmos:
    description: Cuando la gente empieza a programar, normalmente empiezan aprendiendo la sintaxis de un lenguaje, pero la sintaxis de la mayoría de los lenguajes son bastante similares, lo que más importa es dominar los algoritmos y las estructuras de datos, el lenguaje más lento (lo siento Python) con un buen algoritmo puede superar al lenguaje más rápido con un mal algoritmo. Educative tiene unos buenos cursos sobre eso, certificado incluido
    link: https://www.educative.io/courses/ds-and-algorithms-in-python?aff=xkQr
    linkText: Quiero saber más sobre algoritmos y estructuras de datos
    title: No seas de los software engineers que no dominan algoritmos
  arquitectura de software:
    description: Es super fácil aprender las bases de la programación, y la sintaxis de los lenguajes, sin embargo aprender a estructurar grandes bases de código y su flujo es enrevesado, porque normalmente las aplicaciones no crecen tanto, y porque es un área de conocimiento relativamente nueva, mis recursos favoritos son «The system design interview series», pero si no te van los libros educative tiene un curso completo sobre diseño de sistemas también.
    link: https://www.educative.io/path/deep-dive-into-system-design-interview?aff=xkQr
    linkText: Me apunto a aprender diseño de sistemas
    title: ¿Dónde aprender arquitectura de software?
  bases de datos:
    description: Si estás empezando con bases de datos y backend, déjame decirte algo":" olvídate de las bases de datos no relacionales por ahora, empieza con SQL y dame las gracias después. Primero aprende a hacer SELECTS, INSERTS, UPDATES, DELETES, JOINS y todas las demás funciones, y si te da pereza buscar un buen tutorial, bien estructurado y secuencial, mira los que hay en educative, certificado incluido'.
    link: https://www.educative.io/courses/getting-started-sql-relational-databases?aff=xkQr
    linkText: Quiero aprender SQL
    title: ¿Quieres pasar de frontend a backend? Necesitarás SQL
  django:
    description: Para dominar Django hay que entender como funciona, como una petición HTTP va al router, que pasa los datos de la petición a la función (o clase) adecuada y luego como se puede el ORM de Django para interactuar con la base de datos y devolver una respuesta si quieres una explicación detallada de cada paso, educative tiene un curso sobre eso, con certificado incluido, y se cubre Python (por si no sabes Python) link abajo.
    link: https://www.educative.io/path/become-a-django-developer?aff=xkQr
    linkText: Quiero saber más sobre el curso completo de Django
    title: ¿Qué tal un curso con todo lo que Django ofrece?
  docker:
    description: Si lo que buscas es aprender Docker para poder trabajar como ingeniero devops o como base para aprender kubernetes, necesitas aprender fundamentos de redes, git y github (para rastrear tus archivos yml de k8s), contenedores y docker, he escrito unas cuantas entradas sobre ellos, pero si vas en serio, por qué no inviertes unos cuantos pavos en un curso online (como el devops path de educative) y un certificado y te quitas de encima todo el rollo de buscar cursos gratuitos aquí y allá
    link: https://www.educative.io/path/devops-for-developers?aff=xkQr
    linkText: Quiero aprender Kubernetes
    title: ¿Quieres aprender Kubernetes para ser devops?
  fastapi:
    description: Normalmente, usaría Django para escribir cualquier API, sin embargo probé FastAPI y me enamoré de su simplicidad y velocidad, es ciertamente más rápido que Django, si estas buscando un framework que te permita crear una API con un excelente rendimiento y en tiempo record, checa el siguiente curso.
    link: https://www.educative.io/courses/rest-api-python-microsoft-azure?aff=xkQr
    linkText: Quiero aprender FastAPI
    title: FastAPI es un gran framework para el desarrollo de APIs
  git:
    description: Claro que todo el mundo sabe hacer git add y git commit, pero no todo el mundo sabe usar git hasta sus límites, si no sabes de cherry-picking, bisect o hooks, aún te falta exprimir más a Git, ve a por los comandos avanzados de git ya sea con los cursos completos como el de educative, o donde quieras, pero soluciónalo ya.
    link: https://www.educative.io/courses/learn-git-hard-way?aff=xkQr
    linkText: Quiero aprender Git avanzado
    title: No te conformes con git add y git commit
  go:
    description: El otro día encontré este curso de Go, trata sobre el nucleo de Go como lenguaje, así como conceptos avanzados como manejo de errores y redes, técnicas de programación eficientes y errores comunes de este incomprendido lenguaje tan potente.
    link: https://www.educative.io/courses/the-way-to-go?aff=xkQr
    linkText: Quiero saber más sobre este curso completo de Go
    title: ¿Por qué no ir más allá de los fundamentos de Go hacia algo más avanzado?
  htmx:
    description: null
    link: null
    linkText: null
    title: null
  inteligencia artificial:
    description: Hay muchas opciones disponibles para entrenar un modelo de machine learning, entre las más baratas que he encontrado se encuentra Digital Ocean, en la cual puedes rentar una GPU por unos cuantos dólares, ademaś tienen descuentos si contratas planes por adelantado, aunque yo prefiero la primera opción. Además como usuario nuevo te regalan 200 dólares para que los uses como tú quieras, salvo algunas excepciones, ya sabes, la letra chiquita siempre.
    link: https://m.do.co/c/a22240ebb8e7
    linkText: Quiero ver los precios en Digital Ocean
    title: ¿Dónde entrenar un modelo de Machine learning?
  javascript:
    description: Si tus habilidades en Javascript ya son lo suficientemente buenas como para escribir algunas aplicaciones de complejidad media, probablemente te habrás dado cuenta de algunas de sus múltiples debilidades, Typescript fue creado para resolverlas, y hay plataformas como educative, que te llevarán a dominar Typescript.
    link: https://www.educative.io/courses/learn-typescript-complete-course?aff=xkQr
    linkText: Quiero aprender Typescript
    title: No te conformes con Javascript, aprende también Typescript
  linux y devops:
    description: Debes sentirte cómodo usando linux, por eso estás aquí ¿verdad? para gente como tú que no teme ensuciarse las manos y prefiere personalizar su propio entorno en lugar de que otros decidan por ellos, la mejor opción es un VPS (Servidor Virtual Privado), y el más barato que he encontrado, al menos hasta ahora, es Digital Ocean, desde $4 USD al mes. No me creas, compruébalo, y de paso aprovecha los créditos gratuitos que ofrecen si te registras.
    link: https://m.do.co/c/a22240ebb8e7
    linkText: Visitar DO
    title: ¿Dónde hostear una aplicación como esta?
  opiniones:
    description: Últimamente he estado experimentando con cursos en línea, he probado varias plataformas y hasta ahora me ha gustado la plataforma de Educative y la gran variedad de cursos en línea que ofrecen. Si estás buscando perfeccionar tus habilidades y llevarlas al siguiente nivel tal vez deberías considerar gastar unos dólares en tu educación.
    link: https://www.educative.io/unlimited?aff=xkQr
    linkText: Regístrate en Educative.
    title: Cómo mejorar tus conocimientos de software
  python:
    description: Bueno, no es un secreto que Python está más que bien en estos días, la IA ha convertido a Python de un lenguaje de scripting o de juguete en uno de los lenguajes más queridos y bien pagados, y se utiliza incluso para proyectos enormes, sobre todo en inteligencia artificial, ríndete al FOMO y aprende Python ahora, obtén un certificado en educative.
    link: https://www.educative.io/courses/learn-to-code-python-for-absolute-beginners?aff=xkQr
    linkText: Ok, me has convencido quiero aprender Python
    title: ¿Quieres cambiar de Javascript a Python? ¿Por la AI verdad?
  react:
    description: React es una librería, pero hay frameworks basados en React que pueden acelerar tu desarrollo y encargarse de todo el boilerplate que se suele escribir, uno de ellos, y mi favorito personal es Nextjs. Si estás buscando sacar provecho de tus habilidades con React tal vez deberías aprender Nextjs. Y una vez lo domines checa Payload js.
    link: https://www.educative.io/courses/react-beginner-to-advanced?aff=xkQr
    linkText: Quiero aprender Nextjs
    title: Ya sabes React, ¿y ahora qué?
  rust:
    description: Sí, lo sé, he estado allí (tal vez todavía estoy), Rust es complejo, no tiene sentido negarlo, Rust requiere que comprendas múltiples conceptos que no existen en otros lenguajes antes de poder hacer un proyecto sencillo, el mejor recurso para aprender en mi opinión es el libro de Rust. Sin embargo, si prefieres algo más interactivo, dale un vistazo a este curso.
    link: https://www.educative.io/courses/ultimate-guide-to-rust-programming?aff=xkQr
    linkText: Sí, muéstrame dónde aprender Rust
    title: ¿Confundido sobre Rust? ¿Dónde aprender?
  seo:
    description: null
    link: null
    linkText: null
    title: null
  testing:
    description: null
    link: null
    linkText: null
    title: null
  typescript:
    description: Si tus habilidades con Javascript son lo suficientemente buenas como para escribir algunas aplicaciones de complejidad media, probablemente habrás notado algunas de sus debilidades, Typescript fue creado para solucionarlas, y hay plataformas por ahí, como educative, que pueden enseñarte todo lo que necesitas saber sobre Typescript por unos pocos dólares.
    link: https://www.educative.io/courses/learn-typescript-complete-course?aff=xkQr
    linkText: Quiero aprender Typescript
    title: No te conformes con Javascript, aprende también Typescript